FROM alpine:3.6

ENV VERSION=v8.9.4 NPM_VERSION=5 YARN_VERSION=latest GOLANG_VERSION=1.9.4

COPY *.patch /go-alpine-patches/

RUN apk add --no-cache --virtual .build-deps musl-dev openssl go ca-certificates curl make gcc g++ python linux-headers binutils-gold gnupg libstdc++ && \
    set -eux; \
    apk add --no-cache bash && \
    for server in pgp.mit.edu keyserver.pgp.com ha.pool.sks-keyservers.net; do \
      gpg --keyserver $server --recv-keys \
      94AE36675C464D64BAFA68DD7434390BDBE9B9C5 \
      FD3A5288F042B6850C66B31F09FE44734EB7990E \
      71DCFD284A79C3B38668286BC97EC7A07EDE3FC1 \
      DD8F2338BAE7501E3DD5AC78C273792F7D83545D \
      C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8 \
      B9AE9905FFD7803F25714661B63B535A4C206CA9 \
      56730D5401028683275BD23C23EFEFE93C4CFFFE \
      77984A986EBC2AA786BC0F66B01FBB92821C587A && break; \
    done && \
    export \
      GOROOT_BOOTSTRAP="$(go env GOROOT)" \
      GOOS="$(go env GOOS)" \
      GOARCH="$(go env GOARCH)" \
      GOHOSTOS="$(go env GOHOSTOS)" \
      GOHOSTARCH="$(go env GOHOSTARCH)" \
    ; \
    export GO386='387'; \
    wget -O go.tgz "https://golang.org/dl/go$GOLANG_VERSION.src.tar.gz"; \
    tar -C /usr/local -xzf go.tgz; \
    rm go.tgz; \
    cd /usr/local/go/src; \
    for p in /go-alpine-patches/*.patch; do \
      [ -f "$p" ] || continue; \
      patch -p2 -i "$p"; \
    done; \
    ./make.bash; \
    rm -rf /go-alpine-patches; \
    export PATH="/usr/local/go/bin:$PATH"; \
    export GOPATH="/home/project"; \
    export PATH=$GOPATH/bin:$PATH; \
    go version && \
    mkdir -p "$GOPATH/src" "$GOPATH/bin" && chmod -R 777 "$GOPATH" && \
    cd ~ && \ 
    curl -sfSLO https://nodejs.org/dist/${VERSION}/node-${VERSION}.tar.xz && \
    tar -xf node-${VERSION}.tar.xz && \
    cd node-${VERSION} && \
    ./configure --prefix=/usr && \
    make -j$(getconf _NPROCESSORS_ONLN) && \
    make install && \
    cd / && \
    if [ -z "$CONFIG_FLAGS" ]; then \
      if [ -n "$NPM_VERSION" ]; then \
        npm install -g npm@${NPM_VERSION}; \
      fi; \
    find /usr/lib/node_modules/npm -name test -o -name .bin -type d | xargs rm -rf; \
    if [ -n "$YARN_VERSION" ]; then \
      for server in pgp.mit.edu keyserver.pgp.com ha.pool.sks-keyservers.net; do \
        gpg --keyserver $server --recv-keys \
        6A010C5166006599AA17F08146C2130DFD2497F5 && break; \
      done && \
      curl -sfSL -O https://yarnpkg.com/${YARN_VERSION}.tar.gz && \
      mkdir /usr/local/share/yarn && \
      tar -xf ${YARN_VERSION}.tar.gz -C /usr/local/share/yarn --strip 1 && \
      ln -s /usr/local/share/yarn/bin/yarn /usr/local/bin/ && \
      ln -s /usr/local/share/yarn/bin/yarnpkg /usr/local/bin/ && \
      rm ${YARN_VERSION}.tar.gz*; \
    fi; \
  fi && \
  apk del .build-deps && \
  rm -rf ${RM_DIRS} /node-${VERSION}* /usr/share/man /tmp/* /var/cache/apk/* \
    /root/.npm /root/.node-gyp /root/.gnupg /usr/lib/node_modules/npm/man \
    /usr/lib/node_modules/npm/doc /usr/lib/node_modules/npm/html /usr/lib/node_modules/npm/scripts && \

WORKDIR $GOPATH

COPY go-wrapper /usr/local/bin/
